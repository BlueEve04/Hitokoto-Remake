<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteAdapter.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import org.json.JSONObject;&#10;import java.util.List;&#10;&#10;public class FavoriteAdapter extends RecyclerView.Adapter&lt;FavoriteAdapter.ViewHolder&gt; {&#10;    private List&lt;JSONObject&gt; data;&#10;    private Context context;&#10;    public FavoriteAdapter(Context context, List&lt;JSONObject&gt; data) {&#10;        this.context = context;&#10;        this.data = data;&#10;    }&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_favorite, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        JSONObject obj = data.get(position);&#10;        holder.tvIndex.setText(String.valueOf(position + 1));&#10;        holder.tvContent.setText(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;        holder.tvContent.setSelected(true); // 跑马灯&#10;        String author = obj.optString(&quot;from_who&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知作者&quot;:obj.optString(&quot;from_who&quot;, &quot;&quot;);&#10;        if (author.isEmpty()) author = obj.optString(&quot;creator&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知来源&quot;:obj.optString(&quot;creator&quot;, &quot;&quot;);&#10;        holder.tvAuthor.setText(author);&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            StringBuilder msg = new StringBuilder();&#10;            msg.append(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;            String from = obj.optString(&quot;from&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知出处&quot;:obj.optString(&quot;from&quot;, &quot;&quot;);&#10;            String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;==&quot;null&quot;?&quot;未知作者&quot;:obj.optString(&quot;from_who&quot;, &quot;&quot;));&#10;            String creator = obj.optString(&quot;creator&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知来源&quot;:obj.optString(&quot;creator&quot;, &quot;&quot;);&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#10;            String content = msg.toString();&#10;            new AlertDialog.Builder(context)&#10;                .setTitle(&quot;收藏详情&quot;)&#10;                .setMessage(content)&#10;                .setPositiveButton(&quot;复制&quot;, (dialog, which) -&gt; ClipboardUtil.copy(context, content))&#10;                .setNegativeButton(&quot;关闭&quot;, null)&#10;                .show();&#10;        });&#10;    }&#10;    @Override&#10;    public int getItemCount() {&#10;        return data.size();&#10;    }&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvIndex, tvContent, tvAuthor;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvIndex = itemView.findViewById(R.id.tvIndex);&#10;            tvContent = itemView.findViewById(R.id.tvContent);&#10;            tvAuthor = itemView.findViewById(R.id.tvAuthor);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#13;&#10;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import org.json.JSONObject;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class FavoriteAdapter extends RecyclerView.Adapter&lt;FavoriteAdapter.ViewHolder&gt; {&#13;&#10;    private List&lt;JSONObject&gt; data;&#13;&#10;    private Context context;&#13;&#10;    public FavoriteAdapter(Context context, List&lt;JSONObject&gt; data) {&#13;&#10;        this.context = context;&#13;&#10;        this.data = data;&#13;&#10;    }&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_favorite, parent, false);&#13;&#10;        return new ViewHolder(view);&#13;&#10;    }&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#13;&#10;        JSONObject obj = data.get(position);&#13;&#10;        holder.tvIndex.setText(String.valueOf(position + 1));&#13;&#10;        String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#13;&#10;        String from = obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知来源&quot; : obj.optString(&quot;from&quot;, &quot;&quot;);&#13;&#10;        String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知作者&quot; : obj.optString(&quot;from_who&quot;, &quot;&quot;);&#13;&#10;        String creator = obj.optString(&quot;creator&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知&quot; : obj.optString(&quot;creator&quot;, &quot;&quot;);&#13;&#10;        String author = fromWho.isEmpty() ? (creator.isEmpty() ? &quot;&quot; : creator) : fromWho;&#13;&#10;        holder.tvContent.setText(hitokoto);&#13;&#10;        holder.tvContent.setSelected(true); // 跑马灯&#13;&#10;        holder.tvAuthor.setText(author);&#13;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#13;&#10;            StringBuilder msg = new StringBuilder();&#13;&#10;            msg.append(hitokoto);&#13;&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#13;&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#13;&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#13;&#10;            String content = msg.toString();&#13;&#10;            new AlertDialog.Builder(context)&#13;&#10;                .setTitle(&quot;收藏详情&quot;)&#13;&#10;                .setMessage(content)&#13;&#10;                .setPositiveButton(&quot;复制&quot;, (dialog, which) -&gt; ClipboardUtil.copy(context, content))&#13;&#10;                .setNegativeButton(&quot;关闭&quot;, null)&#13;&#10;                .show();&#13;&#10;        });&#13;&#10;    }&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return data.size();&#13;&#10;    }&#13;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        TextView tvIndex, tvContent, tvAuthor;&#13;&#10;        public ViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            tvIndex = itemView.findViewById(R.id.tvIndex);&#13;&#10;            tvContent = itemView.findViewById(R.id.tvContent);&#13;&#10;            tvAuthor = itemView.findViewById(R.id.tvAuthor);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/HitokotoCardAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/HitokotoCardAdapter.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.core.content.res.ResourcesCompat;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import org.json.JSONObject;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class HitokotoCardAdapter extends RecyclerView.Adapter&lt;HitokotoCardAdapter.ViewHolder&gt; {&#10;    private List&lt;JSONObject&gt; windowData;&#10;    private List&lt;Integer&gt; windowColors;&#10;    public int windowStartIndex = 0;&#10;&#10;    public HitokotoCardAdapter(List&lt;JSONObject&gt; windowData, List&lt;Integer&gt; windowColors) {&#10;        this.windowData = windowData;&#10;        this.windowColors = windowColors;&#10;    }&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_card, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        JSONObject obj = windowData.get(position);&#10;        int color = windowColors.get(position);&#10;        String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;).equals(&quot;null&quot;)?(&quot;Err!未找到文字!联系作者解决！&quot;):(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;        String from = (obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;))?(&quot;未知来源&quot;):(obj.optString(&quot;from&quot;, &quot;&quot;));&#10;        String fromWho = (obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;))?(&quot;未知作者&quot;):(obj.optString(&quot;from_who&quot;, &quot;&quot;));&#10;        String creator = obj.optString(&quot;creator&quot;, &quot;&quot;).equals(&quot;null&quot;)?(&quot;未知&quot;):(obj.optString(&quot;creator&quot;, &quot;&quot;));&#10;        holder.textView.setText(hitokoto);&#10;        holder.fromView.setText(from.isEmpty() ? &quot;&quot; : (&quot;—— &quot; + from));&#10;        holder.fromWhoView.setText(fromWho.isEmpty() ? &quot;&quot; : fromWho);&#10;        holder.creatorView.setText(creator.isEmpty() ? &quot;&quot; : (&quot;录入者: &quot; + creator));&#10;        // 字体设置&#10;        int fontType = SharedPreferenceManager.getFontType(holder.itemView.getContext());&#10;        if (fontType == 1) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;        } else if (fontType == 2) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;        } else if (fontType == 3) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;        } else {&#10;            holder.textView.setTypeface(null);&#10;            holder.fromView.setTypeface(null);&#10;            holder.fromWhoView.setTypeface(null);&#10;            holder.creatorView.setTypeface(null);&#10;        }&#10;        // 字体大小设置&#10;        int fontSize = SharedPreferenceManager.getFontSize(holder.itemView.getContext());&#10;        holder.textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize);&#10;        holder.fromView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 2);&#10;        holder.fromWhoView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 2);&#10;        holder.creatorView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 4);&#10;        holder.setColor(color);&#10;        // 长按弹窗，支持复制&#10;        holder.itemView.setOnLongClickListener(v -&gt; {&#10;            Context context = v.getContext();&#10;            StringBuilder msg = new StringBuilder();&#10;            msg.append(hitokoto);&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#10;            String content = msg.toString();&#10;            DialogueManager.showDialog(context, &quot;每日一言&quot;, content, 2, new String[]{&quot;复制&quot;, &quot;关闭&quot;}, which -&gt; {&#10;                if (which == 0) {&#10;                    ClipboardUtil.copy(context, content);&#10;                }&#10;            }, null);&#10;            return true;&#10;        });&#10;        // 支持手指滚动内容&#10;        holder.textView.setMovementMethod(new android.text.method.ScrollingMovementMethod());&#10;        holder.textView.setVerticalScrollBarEnabled(true);&#10;        holder.textView.setFocusable(true);&#10;        holder.textView.setFocusableInTouchMode(true);&#10;        holder.textView.setOnTouchListener((v, event) -&gt; {&#10;            v.getParent().requestDisallowInterceptTouchEvent(true);&#10;            if ((event.getAction() &amp; android.view.MotionEvent.ACTION_MASK) == android.view.MotionEvent.ACTION_UP) {&#10;                v.getParent().requestDisallowInterceptTouchEvent(false);&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;    @Override&#10;    public int getItemCount() {&#10;        return windowData.size();&#10;    }&#10;    public void setWindowData(List&lt;JSONObject&gt; windowData, List&lt;Integer&gt; windowColors, int windowStartIndex) {&#10;        this.windowData = windowData;&#10;        this.windowColors = windowColors;&#10;        this.windowStartIndex = windowStartIndex;&#10;    }&#10;&#10;    // CardStateProvider接口&#10;    public interface CardStateProvider {&#10;        Integer getTargetColor(int globalIndex);&#10;        boolean isFixed(int globalIndex);&#10;        Float getProgress(int globalIndex);&#10;    }&#10;    private CardStateProvider stateProvider;&#10;&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView textView, fromView, fromWhoView, creatorView;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            textView = itemView.findViewById(R.id.cardText);&#10;            fromView = itemView.findViewById(R.id.cardFrom);&#10;            fromWhoView = itemView.findViewById(R.id.cardFromWho);&#10;            creatorView = itemView.findViewById(R.id.cardCreator);&#10;&#10;        }&#10;        public void setColor(int color) {&#10;            Context context = itemView.getContext();&#10;            boolean colorful = SharedPreferenceManager.isColorfulCardEnabled(context);&#10;            if (colorful) {&#10;                if (itemView instanceof androidx.cardview.widget.CardView) {&#10;                    ((androidx.cardview.widget.CardView) itemView).setCardBackgroundColor(color);&#10;                } else {&#10;                    itemView.setBackgroundColor(color);&#10;                }&#10;            } else {&#10;                int cardBg = ContextCompat.getColor(context, R.color.card_bg);&#10;                if (itemView instanceof androidx.cardview.widget.CardView) {&#10;                    ((androidx.cardview.widget.CardView) itemView).setCardBackgroundColor(cardBg);&#10;                } else {&#10;                    itemView.setBackgroundColor(cardBg);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.core.content.res.ResourcesCompat;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import org.json.JSONObject;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class HitokotoCardAdapter extends RecyclerView.Adapter&lt;HitokotoCardAdapter.ViewHolder&gt; {&#10;    private List&lt;JSONObject&gt; windowData;&#10;    private List&lt;Integer&gt; windowColors;&#10;    public int windowStartIndex = 0;&#10;&#10;    public HitokotoCardAdapter(List&lt;JSONObject&gt; windowData, List&lt;Integer&gt; windowColors) {&#10;        this.windowData = windowData;&#10;        this.windowColors = windowColors;&#10;    }&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_card, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        JSONObject obj = windowData.get(position);&#10;        int color = windowColors.get(position);&#10;        String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;).equals(&quot;null&quot;)?(&quot;Err!未找到文字!联系作者解决！&quot;):(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;        String from = (obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;))?(&quot;未知来源&quot;):(obj.optString(&quot;from&quot;, &quot;&quot;));&#10;        String fromWho = (obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;))?(&quot;未知作者&quot;):(obj.optString(&quot;from_who&quot;, &quot;&quot;));&#10;        String creator = obj.optString(&quot;creator&quot;, &quot;&quot;).equals(&quot;null&quot;)?(&quot;未知&quot;):(obj.optString(&quot;creator&quot;, &quot;&quot;));&#10;        holder.textView.setText(hitokoto);&#10;        holder.fromView.setText(from.isEmpty() ? &quot;&quot; : (&quot;—— &quot; + from));&#10;        holder.fromWhoView.setText(fromWho.isEmpty() ? &quot;&quot; : fromWho);&#10;        holder.creatorView.setText(creator.isEmpty() ? &quot;&quot; : (&quot;录入者: &quot; + creator));&#10;        // 字体设置&#10;        int fontType = SharedPreferenceManager.getFontType(holder.itemView.getContext());&#10;        if (fontType == 1) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hrd));&#10;        } else if (fontType == 2) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.hsmx));&#10;        } else if (fontType == 3) {&#10;            holder.textView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.fromView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.fromWhoView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;            holder.creatorView.setTypeface(ResourcesCompat.getFont(holder.itemView.getContext(), R.font.sst));&#10;        } else {&#10;            holder.textView.setTypeface(null);&#10;            holder.fromView.setTypeface(null);&#10;            holder.fromWhoView.setTypeface(null);&#10;            holder.creatorView.setTypeface(null);&#10;        }&#10;        // 字体大小设置&#10;        int fontSize = SharedPreferenceManager.getFontSize(holder.itemView.getContext());&#10;        holder.textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize);&#10;        holder.fromView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 2);&#10;        holder.fromWhoView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 2);&#10;        holder.creatorView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_SP, fontSize - 4);&#10;        holder.setColor(color);&#10;        // 长按弹窗，支持复制&#10;        holder.itemView.setOnLongClickListener(v -&gt; {&#10;            Context context = v.getContext();&#10;            StringBuilder msg = new StringBuilder();&#10;            msg.append(hitokoto);&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#10;            String content = msg.toString();&#10;            DialogueManager.showDialog(context, &quot;每日一言&quot;, content, 2, new String[]{&quot;复制&quot;, &quot;关闭&quot;}, which -&gt; {&#10;                if (which == 0) {&#10;                    ClipboardUtil.copy(context, content);&#10;                }&#10;            }, null);&#10;            return true;&#10;        });&#10;        // 支持手指滚动内容，重写滑动逻辑&#10;        holder.textView.setMovementMethod(new android.text.method.ScrollingMovementMethod());&#10;        holder.textView.setVerticalScrollBarEnabled(true);&#10;        holder.textView.setFocusable(true);&#10;        holder.textView.setFocusableInTouchMode(true);&#10;        holder.textView.setOnTouchListener(new View.OnTouchListener() {&#10;            float startX = 0;&#10;            float startY = 0;&#10;            boolean isVertical = false;&#10;            boolean isDecided = false;&#10;            @Override&#10;            public boolean onTouch(View v, android.view.MotionEvent event) {&#10;                switch (event.getActionMasked()) {&#10;                    case android.view.MotionEvent.ACTION_DOWN:&#10;                        startX = event.getX();&#10;                        startY = event.getY();&#10;                        isDecided = false;&#10;                        isVertical = false;&#10;                        v.getParent().requestDisallowInterceptTouchEvent(true);&#10;                        break;&#10;                    case android.view.MotionEvent.ACTION_MOVE:&#10;                        float dx = Math.abs(event.getX() - startX);&#10;                        float dy = Math.abs(event.getY() - startY);&#10;                        if (!isDecided) {&#10;                            if (dx &gt; dy) {&#10;                                // 横向滑动，允许RecyclerView拦截&#10;                                v.getParent().requestDisallowInterceptTouchEvent(false);&#10;                                isVertical = false;&#10;                                isDecided = true;&#10;                            } else if (dy &gt; dx) {&#10;                                // 纵向滑动，禁止RecyclerView拦截&#10;                                v.getParent().requestDisallowInterceptTouchEvent(true);&#10;                                isVertical = true;&#10;                                isDecided = true;&#10;                            }&#10;                        }&#10;                        break;&#10;                    case android.view.MotionEvent.ACTION_UP:&#10;                    case android.view.MotionEvent.ACTION_CANCEL:&#10;                        v.getParent().requestDisallowInterceptTouchEvent(false);&#10;                        isDecided = false;&#10;                        if (event.getActionMasked() == android.view.MotionEvent.ACTION_UP &amp;&amp; !isVertical) {&#10;                            v.performClick();&#10;                        }&#10;                        break;&#10;                }&#10;                // 纵向滑动时让TextView消费事件，横向时不消费&#10;                return isVertical;&#10;            }&#10;        });&#10;    }&#10;    @Override&#10;    public int getItemCount() {&#10;        return windowData.size();&#10;    }&#10;    public void setWindowData(List&lt;JSONObject&gt; windowData, List&lt;Integer&gt; windowColors, int windowStartIndex) {&#10;        this.windowData = windowData;&#10;        this.windowColors = windowColors;&#10;        this.windowStartIndex = windowStartIndex;&#10;    }&#10;&#10;    // CardStateProvider接口&#10;    public interface CardStateProvider {&#10;        Integer getTargetColor(int globalIndex);&#10;        boolean isFixed(int globalIndex);&#10;        Float getProgress(int globalIndex);&#10;    }&#10;    private CardStateProvider stateProvider;&#10;&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView textView, fromView, fromWhoView, creatorView;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            textView = itemView.findViewById(R.id.cardText);&#10;            fromView = itemView.findViewById(R.id.cardFrom);&#10;            fromWhoView = itemView.findViewById(R.id.cardFromWho);&#10;            creatorView = itemView.findViewById(R.id.cardCreator);&#10;&#10;        }&#10;        public void setColor(int color) {&#10;            Context context = itemView.getContext();&#10;            boolean colorful = SharedPreferenceManager.isColorfulCardEnabled(context);&#10;            if (colorful) {&#10;                if (itemView instanceof androidx.cardview.widget.CardView) {&#10;                    ((androidx.cardview.widget.CardView) itemView).setCardBackgroundColor(color);&#10;                } else {&#10;                    itemView.setBackgroundColor(color);&#10;                }&#10;            } else {&#10;                int cardBg = ContextCompat.getColor(context, R.color.card_bg);&#10;                if (itemView instanceof androidx.cardview.widget.CardView) {&#10;                    ((androidx.cardview.widget.CardView) itemView).setCardBackgroundColor(cardBg);&#10;                } else {&#10;                    itemView.setBackgroundColor(cardBg);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/WidgetConfigActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/WidgetConfigActivity.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.Activity;&#10;import android.appwidget.AppWidgetManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WidgetConfigActivity extends Activity {&#10;    private int appWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;&#10;    private EditText etMaxLines;&#10;    private Spinner spinnerFont, spinnerBg, spinnerFontColor, spinnerFromColor, spinnerRefreshInterval;&#10;    private Button btnSave;&#10;    private Switch switchShowFrom, switchShowAuthor;&#10;    private static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;    private static final String[] BG_OPTIONS = {&quot;白色&quot;, &quot;黑色&quot;, &quot;跟随系统&quot;, &quot;透明&quot;,&quot;黄纸本&quot;};&#10;    private static final String[] FONT_COLOR_OPTIONS = {&quot;黑色&quot;, &quot;白色&quot;, &quot;跟随系统&quot;};&#10;    private static final String[] FROM_COLOR_OPTIONS = {&quot;灰色&quot;, &quot;白色&quot;, &quot;黑色&quot;};&#10;    private static final String[] REFRESH_INTERVAL_OPTIONS = {&quot;15分钟&quot;, &quot;30分钟&quot;, &quot;1小时&quot;, &quot;2小时&quot;, &quot;5小时&quot;, &quot;12小时&quot;, &quot;24小时&quot;, &quot;永不自动刷新&quot;};&#10;    private static final long[] REFRESH_INTERVAL_VALUES = {15*60*1000L, 30*60*1000L, 60*60*1000L, 2*60*60*1000L, 5*60*60*1000L, 12*60*60*1000L, 24*60*60*1000L, 0L};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.widget_config);&#10;        etMaxLines = findViewById(R.id.et_max_lines);&#10;        spinnerFont = findViewById(R.id.spinner_font);&#10;        spinnerBg = findViewById(R.id.spinner_bg);&#10;        spinnerFontColor = findViewById(R.id.spinner_font_color);&#10;        spinnerFromColor = findViewById(R.id.spinner_from_color);&#10;        spinnerRefreshInterval = findViewById(R.id.spinner_refresh_interval);&#10;        btnSave = findViewById(R.id.btn_save);&#10;        switchShowFrom = findViewById(R.id.switch_show_from);&#10;        switchShowAuthor = findViewById(R.id.switch_show_author);&#10;&#10;        // 获取 appWidgetId&#10;        Intent intent = getIntent();&#10;        Bundle extras = intent.getExtras();&#10;        if (extras != null) {&#10;            appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);&#10;        }&#10;        if (appWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {&#10;            // 允许无 appWidgetId 进入全局设置模式&#10;            appWidgetId = -1;&#10;        }&#10;&#10;        // 字体选择&#10;        List&lt;String&gt; fontList = new ArrayList&lt;&gt;();&#10;        fontList.add(&quot;系统默认&quot;);&#10;        try {&#10;            String[] fonts = getAssets().list(&quot;&quot;);&#10;            if (fonts != null) {&#10;                for (String f : fonts) {&#10;                    if (f.endsWith(&quot;.ttf&quot;) || f.endsWith(&quot;.otf&quot;)) fontList.add(f);&#10;                }&#10;            }&#10;        } catch (IOException ignored) {}&#10;        // 字体选择（支持自定义目录）&#10;        java.io.File customFontDir = new java.io.File(&quot;/storage/emulated/0/HitokotoFonts/&quot;);&#10;        if (customFontDir.exists() &amp;&amp; customFontDir.isDirectory()) {&#10;            java.io.File[] files = customFontDir.listFiles();&#10;            if (files != null) {&#10;                for (java.io.File f : files) {&#10;                    if (f.getName().endsWith(&quot;.ttf&quot;) || f.getName().endsWith(&quot;.otf&quot;)) {&#10;                        fontList.add(&quot;[自定义]&quot; + f.getName());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        ArrayAdapter&lt;String&gt; fontAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, fontList);&#10;        fontAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFont.setAdapter(fontAdapter);&#10;&#10;        // 背景色选择&#10;        ArrayAdapter&lt;String&gt; bgAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, BG_OPTIONS);&#10;        bgAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerBg.setAdapter(bgAdapter);&#10;        // 字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fontColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FONT_COLOR_OPTIONS);&#10;        fontColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFontColor.setAdapter(fontColorAdapter);&#10;        // 来源字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fromColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FROM_COLOR_OPTIONS);&#10;        fromColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromColor.setAdapter(fromColorAdapter);&#10;        // 刷新间隔选择&#10;        ArrayAdapter&lt;String&gt; refreshIntervalAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, REFRESH_INTERVAL_OPTIONS);&#10;        refreshIntervalAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerRefreshInterval.setAdapter(refreshIntervalAdapter);&#10;&#10;        btnSave.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                saveConfig();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void saveConfig() {&#10;        int maxLines = 4;&#10;        try {&#10;            maxLines = Integer.parseInt(etMaxLines.getText().toString());&#10;        } catch (Exception ignored) {}&#10;        String font = spinnerFont.getSelectedItem().toString();&#10;        String bg = spinnerBg.getSelectedItem().toString();&#10;        String fontColor = spinnerFontColor.getSelectedItem().toString();&#10;        boolean showFrom = switchShowFrom.isChecked();&#10;        String fromColor = spinnerFromColor.getSelectedItem().toString();&#10;        boolean showAuthor = switchShowAuthor.isChecked();&#10;        int refreshIntervalIndex = spinnerRefreshInterval.getSelectedItemPosition();&#10;        long refreshIntervalValue = REFRESH_INTERVAL_VALUES[refreshIntervalIndex];&#10;        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;        if (appWidgetId == -1) {&#10;            editor.putInt(&quot;maxLines_global&quot;, maxLines);&#10;            editor.putString(&quot;font_global&quot;, font);&#10;            editor.putString(&quot;bg_global&quot;, bg);&#10;            editor.putString(&quot;fontColor_global&quot;, fontColor);&#10;            editor.putBoolean(&quot;showFrom_global&quot;, showFrom);&#10;            editor.putString(&quot;fromColor_global&quot;, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_global&quot;, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_global&quot;, refreshIntervalValue);&#10;            editor.apply();&#10;            android.widget.Toast.makeText(this, &quot;全局设置已保存&quot;, android.widget.Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            editor.putInt(&quot;maxLines_&quot; + appWidgetId, maxLines);&#10;            editor.putString(&quot;font_&quot; + appWidgetId, font);&#10;            editor.putString(&quot;bg_&quot; + appWidgetId, bg);&#10;            editor.putString(&quot;fontColor_&quot; + appWidgetId, fontColor);&#10;            editor.putBoolean(&quot;showFrom_&quot; + appWidgetId, showFrom);&#10;            editor.putString(&quot;fromColor_&quot; + appWidgetId, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_&quot; + appWidgetId, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_&quot; + appWidgetId, refreshIntervalValue);&#10;            editor.apply();&#10;            // 刷新小部件&#10;            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this);&#10;            HitokotoWidgetProvider.updateAppWidget(this, appWidgetManager, appWidgetId);&#10;            // 返回结果&#10;            Intent resultValue = new Intent();&#10;            resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            setResult(RESULT_OK, resultValue);&#10;            finish();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.Activity;&#10;import android.appwidget.AppWidgetManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WidgetConfigActivity extends Activity {&#10;    private int appWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;&#10;    private EditText etMaxLines;&#10;    private Spinner spinnerFont, spinnerBg, spinnerFontColor, spinnerFromColor, spinnerRefreshInterval;&#10;    private Button btnSave;&#10;    private Switch switchShowFrom, switchShowAuthor;&#10;    private static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;    private static final String[] BG_OPTIONS = {&quot;白色&quot;, &quot;黑色&quot;, &quot;跟随系统&quot;, &quot;透明&quot;,&quot;黄纸本&quot;};&#10;    private static final String[] FONT_COLOR_OPTIONS = {&quot;黑色&quot;, &quot;白色&quot;, &quot;跟随系统&quot;};&#10;    private static final String[] FROM_COLOR_OPTIONS = {&quot;灰色&quot;, &quot;白色&quot;, &quot;黑色&quot;};&#10;    private static final String[] REFRESH_INTERVAL_OPTIONS = {&quot;15分钟&quot;, &quot;30分钟&quot;, &quot;1小时&quot;, &quot;2小时&quot;, &quot;5小时&quot;, &quot;12小时&quot;, &quot;24小时&quot;, &quot;永不自动刷新&quot;};&#10;    private static final long[] REFRESH_INTERVAL_VALUES = {15*60*1000L, 30*60*1000L, 60*60*1000L, 2*60*60*1000L, 5*60*60*1000L, 12*60*60*1000L, 24*60*60*1000L, 0L};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.widget_config);&#10;        etMaxLines = findViewById(R.id.et_max_lines);&#10;        spinnerFont = findViewById(R.id.spinner_font);&#10;        spinnerBg = findViewById(R.id.spinner_bg);&#10;        spinnerFontColor = findViewById(R.id.spinner_font_color);&#10;        spinnerFromColor = findViewById(R.id.spinner_from_color);&#10;        spinnerRefreshInterval = findViewById(R.id.spinner_refresh_interval);&#10;        btnSave = findViewById(R.id.btn_save);&#10;        switchShowFrom = findViewById(R.id.switch_show_from);&#10;        switchShowAuthor = findViewById(R.id.switch_show_author);&#10;&#10;        // 获取 appWidgetId&#10;        Intent intent = getIntent();&#10;        Bundle extras = intent.getExtras();&#10;        if (extras != null) {&#10;            appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);&#10;        }&#10;        if (appWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {&#10;            // 允许无 appWidgetId 进入全局设置模式&#10;            appWidgetId = -1;&#10;        }&#10;&#10;        // 字体选择&#10;        List&lt;String&gt; fontList = new ArrayList&lt;&gt;();&#10;        fontList.add(&quot;系统默认&quot;);&#10;        try {&#10;            String[] fonts = getAssets().list(&quot;&quot;);&#10;            if (fonts != null) {&#10;                for (String f : fonts) {&#10;                    if (f.endsWith(&quot;.ttf&quot;) || f.endsWith(&quot;.otf&quot;)) fontList.add(f);&#10;                }&#10;            }&#10;        } catch (IOException ignored) {}&#10;        // 字体选择（支持自定义目录）&#10;        java.io.File customFontDir = new java.io.File(&quot;/storage/emulated/0/HitokotoFonts/&quot;);&#10;        if (customFontDir.exists() &amp;&amp; customFontDir.isDirectory()) {&#10;            java.io.File[] files = customFontDir.listFiles();&#10;            if (files != null) {&#10;                for (java.io.File f : files) {&#10;                    if (f.getName().endsWith(&quot;.ttf&quot;) || f.getName().endsWith(&quot;.otf&quot;)) {&#10;                        fontList.add(&quot;[自定义]&quot; + f.getName());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        ArrayAdapter&lt;String&gt; fontAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, fontList);&#10;        fontAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFont.setAdapter(fontAdapter);&#10;&#10;        // 背景色选择&#10;        ArrayAdapter&lt;String&gt; bgAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, BG_OPTIONS);&#10;        bgAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerBg.setAdapter(bgAdapter);&#10;        // 字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fontColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FONT_COLOR_OPTIONS);&#10;        fontColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFontColor.setAdapter(fontColorAdapter);&#10;        // 来源字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fromColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FROM_COLOR_OPTIONS);&#10;        fromColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromColor.setAdapter(fromColorAdapter);&#10;        // 刷新间隔选择&#10;        ArrayAdapter&lt;String&gt; refreshIntervalAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, REFRESH_INTERVAL_OPTIONS);&#10;        refreshIntervalAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerRefreshInterval.setAdapter(refreshIntervalAdapter);&#10;&#10;        btnSave.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                saveConfig();&#10;            }&#10;        });&#10;        // 设置窗口宽度为屏幕宽度的90%&#10;        android.view.WindowManager.LayoutParams params = getWindow().getAttributes();&#10;        android.util.DisplayMetrics dm = getResources().getDisplayMetrics();&#10;        params.width = (int) (dm.widthPixels * 0.9);&#10;        getWindow().setAttributes(params);&#10;    }&#10;&#10;    private void saveConfig() {&#10;        int maxLines = 4;&#10;        try {&#10;            maxLines = Integer.parseInt(etMaxLines.getText().toString());&#10;        } catch (Exception ignored) {}&#10;        String font = spinnerFont.getSelectedItem().toString();&#10;        String bg = spinnerBg.getSelectedItem().toString();&#10;        String fontColor = spinnerFontColor.getSelectedItem().toString();&#10;        boolean showFrom = switchShowFrom.isChecked();&#10;        String fromColor = spinnerFromColor.getSelectedItem().toString();&#10;        boolean showAuthor = switchShowAuthor.isChecked();&#10;        int refreshIntervalIndex = spinnerRefreshInterval.getSelectedItemPosition();&#10;        long refreshIntervalValue = REFRESH_INTERVAL_VALUES[refreshIntervalIndex];&#10;        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;        if (appWidgetId == -1) {&#10;            editor.putInt(&quot;maxLines_global&quot;, maxLines);&#10;            editor.putString(&quot;font_global&quot;, font);&#10;            editor.putString(&quot;bg_global&quot;, bg);&#10;            editor.putString(&quot;fontColor_global&quot;, fontColor);&#10;            editor.putBoolean(&quot;showFrom_global&quot;, showFrom);&#10;            editor.putString(&quot;fromColor_global&quot;, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_global&quot;, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_global&quot;, refreshIntervalValue);&#10;            editor.apply();&#10;            android.widget.Toast.makeText(this, &quot;全局设置已保存&quot;, android.widget.Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            editor.putInt(&quot;maxLines_&quot; + appWidgetId, maxLines);&#10;            editor.putString(&quot;font_&quot; + appWidgetId, font);&#10;            editor.putString(&quot;bg_&quot; + appWidgetId, bg);&#10;            editor.putString(&quot;fontColor_&quot; + appWidgetId, fontColor);&#10;            editor.putBoolean(&quot;showFrom_&quot; + appWidgetId, showFrom);&#10;            editor.putString(&quot;fromColor_&quot; + appWidgetId, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_&quot; + appWidgetId, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_&quot; + appWidgetId, refreshIntervalValue);&#10;            editor.apply();&#10;            // 刷新小部件&#10;            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this);&#10;            HitokotoWidgetProvider.updateAppWidget(this, appWidgetManager, appWidgetId);&#10;            // 返回结果&#10;            Intent resultValue = new Intent();&#10;            resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            setResult(RESULT_OK, resultValue);&#10;            finish();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;false&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    android:alpha=&quot;1&quot;&gt;&#10;&#10;    &lt;!-- 30%位置的参考线 --&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_10_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.04&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;    &lt;!-- 添加的TextView，没有背景 --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/titleTextView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;一言&quot;&#10;        android:fontFamily=&quot;@font/hrd&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;@id/guideline_10_percent&quot;&#10;        android:textSize=&quot;94sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:background=&quot;@null&quot;&#10;        android:textColor=&quot;@color/setting_title&quot;&#10;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:padding=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_30_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.14&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:overScrollMode=&quot;never&quot;&#10;        android:paddingStart=&quot;32dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/guideline_90_percent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/titleTextView&quot; /&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_90_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.77&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/recyclerView&quot;&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction1&quot;&#10;            android:layout_width=&quot;108dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作1&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_save&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作2&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_favico&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction3&quot;&#10;            android:layout_width=&quot;86dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作3&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_settings&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:id=&quot;@+id/fragment_container&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;/&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;false&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    android:alpha=&quot;1&quot;&gt;&#10;&#10;    &lt;!-- 30%位置的参考线 --&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_10_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.04&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;    &lt;!-- 添加的TextView，没有背景 --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/titleTextView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;一言&quot;&#10;        android:fontFamily=&quot;@font/hrd&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;@id/guideline_10_percent&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:background=&quot;@null&quot;&#10;        android:textColor=&quot;@color/setting_title&quot;&#10;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:padding=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_30_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.14&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:overScrollMode=&quot;never&quot;&#10;        android:paddingStart=&quot;32dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;@+id/guideline_30_percent&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/guideline_90_percent&quot; /&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.Guideline&#10;        android:id=&quot;@+id/guideline_90_percent&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintGuide_percent=&quot;0.77&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/recyclerView&quot;&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction1&quot;&#10;            android:layout_width=&quot;108dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作1&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_save&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction2&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作2&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_favico&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/btnAction3&quot;&#10;            android:layout_width=&quot;86dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingBottom=&quot;20dp&quot;&#10;            android:layout_margin=&quot;20dp&quot;&#10;            android:contentDescription=&quot;操作3&quot;&#10;            android:elevation=&quot;3dp&quot;&#10;            app:elevation=&quot;3dp&quot;&#10;            android:scaleX=&quot;1.3&quot;&#10;            android:scaleY=&quot;1.3&quot;&#10;            android:src=&quot;@drawable/ic_settings&quot;&#10;            app:backgroundTint=&quot;@color/button_cbg&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:id=&quot;@+id/fragment_container&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:background=&quot;@android:color/transparent&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;/&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;280dp&quot;&#10;    android:layout_height=&quot;400dp&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    card_view:cardCornerRadius=&quot;24dp&quot;&#10;    card_view:cardElevation=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/cardText&quot;&#10;            android:fontFamily=&quot;@font/hrd&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:textSize=&quot;22sp&quot;&#10;&#10;            android:scrollbars=&quot;vertical&quot;&#10;            android:scrollbarStyle=&quot;insideInset&quot;&#10;            android:overScrollMode=&quot;always&quot;&#10;            android:textColor=&quot;@color/setting_title&quot;&#10;            android:text=&quot;每日一言&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/cardFrom&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#10;            android:text=&quot;—— 出处&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/cardFromWho&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#10;            android:text=&quot;角色/作者&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/cardCreator&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#10;            android:text=&quot;录入者&quot;/&gt;&#10;&#10;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:layout_margin=&quot;16dp&quot;&#13;&#10;    card_view:cardCornerRadius=&quot;24dp&quot;&#13;&#10;    card_view:cardElevation=&quot;8dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&#13;&#10;        android:padding=&quot;24dp&quot;&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/cardText&quot;&#13;&#10;            android:fontFamily=&quot;@font/hrd&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;0dp&quot;&#13;&#10;            android:layout_weight=&quot;1&quot;&#13;&#10;            android:gravity=&quot;center&quot;&#13;&#10;            android:textSize=&quot;22sp&quot;&#13;&#10;&#13;&#10;            android:scrollbars=&quot;vertical&quot;&#13;&#10;            android:scrollbarStyle=&quot;insideInset&quot;&#13;&#10;            android:overScrollMode=&quot;always&quot;&#13;&#10;            android:textColor=&quot;@color/setting_title&quot;&#13;&#10;            android:text=&quot;每日一言&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/cardFrom&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:textSize=&quot;16sp&quot;&#13;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#13;&#10;            android:text=&quot;—— 出处&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/cardFromWho&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#13;&#10;            android:text=&quot;角色/作者&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/cardCreator&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:textSize=&quot;12sp&quot;&#13;&#10;            android:textColor=&quot;@color/setting_subtitle&quot;&#13;&#10;            android:text=&quot;录入者&quot;/&gt;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;&#13;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>