<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteAdapter.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import org.json.JSONObject;&#10;import java.util.List;&#10;&#10;public class FavoriteAdapter extends RecyclerView.Adapter&lt;FavoriteAdapter.ViewHolder&gt; {&#10;    private List&lt;JSONObject&gt; data;&#10;    private Context context;&#10;    public FavoriteAdapter(Context context, List&lt;JSONObject&gt; data) {&#10;        this.context = context;&#10;        this.data = data;&#10;    }&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_favorite, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        JSONObject obj = data.get(position);&#10;        holder.tvIndex.setText(String.valueOf(position + 1));&#10;        holder.tvContent.setText(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;        holder.tvContent.setSelected(true); // 跑马灯&#10;        String author = obj.optString(&quot;from_who&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知作者&quot;:obj.optString(&quot;from_who&quot;, &quot;&quot;);&#10;        if (author.isEmpty()) author = obj.optString(&quot;creator&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知来源&quot;:obj.optString(&quot;creator&quot;, &quot;&quot;);&#10;        holder.tvAuthor.setText(author);&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            StringBuilder msg = new StringBuilder();&#10;            msg.append(obj.optString(&quot;hitokoto&quot;, &quot;&quot;));&#10;            String from = obj.optString(&quot;from&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知出处&quot;:obj.optString(&quot;from&quot;, &quot;&quot;);&#10;            String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;==&quot;null&quot;?&quot;未知作者&quot;:obj.optString(&quot;from_who&quot;, &quot;&quot;));&#10;            String creator = obj.optString(&quot;creator&quot;, &quot;&quot;)==&quot;null&quot;?&quot;未知来源&quot;:obj.optString(&quot;creator&quot;, &quot;&quot;);&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#10;            String content = msg.toString();&#10;            new AlertDialog.Builder(context)&#10;                .setTitle(&quot;收藏详情&quot;)&#10;                .setMessage(content)&#10;                .setPositiveButton(&quot;复制&quot;, (dialog, which) -&gt; ClipboardUtil.copy(context, content))&#10;                .setNegativeButton(&quot;关闭&quot;, null)&#10;                .show();&#10;        });&#10;    }&#10;    @Override&#10;    public int getItemCount() {&#10;        return data.size();&#10;    }&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvIndex, tvContent, tvAuthor;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvIndex = itemView.findViewById(R.id.tvIndex);&#10;            tvContent = itemView.findViewById(R.id.tvContent);&#10;            tvAuthor = itemView.findViewById(R.id.tvAuthor);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#13;&#10;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import org.json.JSONObject;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class FavoriteAdapter extends RecyclerView.Adapter&lt;FavoriteAdapter.ViewHolder&gt; {&#13;&#10;    private List&lt;JSONObject&gt; data;&#13;&#10;    private Context context;&#13;&#10;    public FavoriteAdapter(Context context, List&lt;JSONObject&gt; data) {&#13;&#10;        this.context = context;&#13;&#10;        this.data = data;&#13;&#10;    }&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_favorite, parent, false);&#13;&#10;        return new ViewHolder(view);&#13;&#10;    }&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#13;&#10;        JSONObject obj = data.get(position);&#13;&#10;        holder.tvIndex.setText(String.valueOf(position + 1));&#13;&#10;        String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#13;&#10;        String from = obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知来源&quot; : obj.optString(&quot;from&quot;, &quot;&quot;);&#13;&#10;        String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知作者&quot; : obj.optString(&quot;from_who&quot;, &quot;&quot;);&#13;&#10;        String creator = obj.optString(&quot;creator&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知&quot; : obj.optString(&quot;creator&quot;, &quot;&quot;);&#13;&#10;        String author = fromWho.isEmpty() ? (creator.isEmpty() ? &quot;&quot; : creator) : fromWho;&#13;&#10;        holder.tvContent.setText(hitokoto);&#13;&#10;        holder.tvContent.setSelected(true); // 跑马灯&#13;&#10;        holder.tvAuthor.setText(author);&#13;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#13;&#10;            StringBuilder msg = new StringBuilder();&#13;&#10;            msg.append(hitokoto);&#13;&#10;            if (!from.isEmpty()) msg.append(&quot;\n—— &quot;).append(from);&#13;&#10;            if (!fromWho.isEmpty()) msg.append(&quot;  &quot;).append(fromWho);&#13;&#10;            if (!creator.isEmpty()) msg.append(&quot;\n录入者: &quot;).append(creator);&#13;&#10;            String content = msg.toString();&#13;&#10;            new AlertDialog.Builder(context)&#13;&#10;                .setTitle(&quot;收藏详情&quot;)&#13;&#10;                .setMessage(content)&#13;&#10;                .setPositiveButton(&quot;复制&quot;, (dialog, which) -&gt; ClipboardUtil.copy(context, content))&#13;&#10;                .setNegativeButton(&quot;关闭&quot;, null)&#13;&#10;                .show();&#13;&#10;        });&#13;&#10;    }&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return data.size();&#13;&#10;    }&#13;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        TextView tvIndex, tvContent, tvAuthor;&#13;&#10;        public ViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            tvIndex = itemView.findViewById(R.id.tvIndex);&#13;&#10;            tvContent = itemView.findViewById(R.id.tvContent);&#13;&#10;            tvAuthor = itemView.findViewById(R.id.tvAuthor);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/FavoriteManager.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.content.Context;&#10;import org.json.JSONObject;&#10;import org.json.JSONException;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class FavoriteManager {&#10;    private static final String FILE_NAME = &quot;favorites.txt&quot;;&#10;&#10;    // 添加收藏，已存在则不添加&#10;    public static boolean addFavorite(Context context, JSONObject obj) {&#10;        List&lt;JSONObject&gt; all = getAllFavorites(context);&#10;        for (JSONObject o : all) {&#10;            if (o.optString(&quot;hitokoto&quot;).equals(obj.optString(&quot;hitokoto&quot;))) {&#10;                return false; // 已存在&#10;            }&#10;        }&#10;        try (FileWriter fw = new FileWriter(new File(context.getFilesDir(), FILE_NAME), true)) {&#10;            fw.write(obj.toString() + &quot;\n&quot;);&#10;            return true;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // 获取所有收藏&#10;    public static List&lt;JSONObject&gt; getAllFavorites(Context context) {&#10;        List&lt;JSONObject&gt; list = new ArrayList&lt;&gt;();&#10;        File file = new File(context.getFilesDir(), FILE_NAME);&#10;        if (!file.exists()) return list;&#10;        try (BufferedReader br = new BufferedReader(new FileReader(file))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                try {&#10;                    list.add(new JSONObject(line));&#10;                } catch (JSONException ignore) {}&#10;            }&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;&#10;    // 格式化所有收藏为人类可读文本&#10;    public static String exportAllFavoritesAsText(Context context) {&#10;        List&lt;JSONObject&gt; list = getAllFavorites(context);&#10;        StringBuilder string_bd_worker = new StringBuilder();&#10;        for (JSONObject obj : list) {&#10;            String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#10;            String from = obj.optString(&quot;from&quot;, &quot;&quot;);&#10;            String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;);&#10;            String creator = obj.optString(&quot;creator&quot;, &quot;&quot;);&#10;            string_bd_worker.append(hitokoto).append(&quot;\n&quot;);&#10;            if (!from.isEmpty() || !fromWho.isEmpty()) {&#10;                string_bd_worker.append(&quot;—— &quot;);&#10;                if (!from.isEmpty()) string_bd_worker.append(from);&#10;                if (!fromWho.isEmpty()) string_bd_worker.append(&quot;  &quot;).append(fromWho);&#10;                string_bd_worker.append(&quot;\n&quot;);&#10;            }&#10;            if (!creator.isEmpty()) {&#10;                string_bd_worker.append(&quot;录入者: &quot;).append(creator).append(&quot;\n&quot;);&#10;            }&#10;            string_bd_worker.append(&quot;\n&quot;);&#10;        }&#10;        return string_bd_worker.toString();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import org.json.JSONObject;&#13;&#10;import org.json.JSONException;&#13;&#10;import java.io.*;&#13;&#10;import java.util.*;&#13;&#10;&#13;&#10;public class FavoriteManager {&#13;&#10;    private static final String FILE_NAME = &quot;favorites.txt&quot;;&#13;&#10;&#13;&#10;    // 添加收藏，已存在则不添加&#13;&#10;    public static boolean addFavorite(Context context, JSONObject obj) {&#13;&#10;        List&lt;JSONObject&gt; all = getAllFavorites(context);&#13;&#10;        for (JSONObject o : all) {&#13;&#10;            if (o.optString(&quot;hitokoto&quot;).equals(obj.optString(&quot;hitokoto&quot;))) {&#13;&#10;                return false; // 已存在&#13;&#10;            }&#13;&#10;        }&#13;&#10;        try (FileWriter fw = new FileWriter(new File(context.getFilesDir(), FILE_NAME), true)) {&#13;&#10;            fw.write(obj.toString() + &quot;\n&quot;);&#13;&#10;            return true;&#13;&#10;        } catch (IOException e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // 获取所有收藏&#13;&#10;    public static List&lt;JSONObject&gt; getAllFavorites(Context context) {&#13;&#10;        List&lt;JSONObject&gt; list = new ArrayList&lt;&gt;();&#13;&#10;        File file = new File(context.getFilesDir(), FILE_NAME);&#13;&#10;        if (!file.exists()) return list;&#13;&#10;        try (BufferedReader br = new BufferedReader(new FileReader(file))) {&#13;&#10;            String line;&#13;&#10;            while ((line = br.readLine()) != null) {&#13;&#10;                try {&#13;&#10;                    list.add(new JSONObject(line));&#13;&#10;                } catch (JSONException ignore) {}&#13;&#10;            }&#13;&#10;        } catch (IOException e) {&#13;&#10;            e.printStackTrace();&#13;&#10;        }&#13;&#10;        return list;&#13;&#10;    }&#13;&#10;&#13;&#10;    // 格式化所有收藏为人类可读文本&#13;&#10;    public static String exportAllFavoritesAsText(Context context) {&#13;&#10;        List&lt;JSONObject&gt; list = getAllFavorites(context);&#13;&#10;        StringBuilder string_bd_worker = new StringBuilder();&#13;&#10;        for (JSONObject obj : list) {&#13;&#10;            String hitokoto = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#13;&#10;            String from = obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知来源&quot; : obj.optString(&quot;from&quot;, &quot;&quot;);&#13;&#10;            String fromWho = obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知作者&quot; : obj.optString(&quot;from_who&quot;, &quot;&quot;);&#13;&#10;            String creator = obj.optString(&quot;creator&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知&quot; : obj.optString(&quot;creator&quot;, &quot;&quot;);&#13;&#10;            string_bd_worker.append(hitokoto).append(&quot;\n&quot;);&#13;&#10;            if (!from.isEmpty() || !fromWho.isEmpty()) {&#13;&#10;                string_bd_worker.append(&quot;—— &quot;);&#13;&#10;                if (!from.isEmpty()) string_bd_worker.append(from);&#13;&#10;                if (!fromWho.isEmpty()) string_bd_worker.append(&quot;  &quot;).append(fromWho);&#13;&#10;                string_bd_worker.append(&quot;\n&quot;);&#13;&#10;            }&#13;&#10;            if (!creator.isEmpty()) string_bd_worker.append(&quot;录入者: &quot;).append(creator).append(&quot;\n&quot;);&#13;&#10;            string_bd_worker.append(&quot;\n&quot;);&#13;&#10;        }&#13;&#10;        return string_bd_worker.toString();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/HitokotoWidgetProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/HitokotoWidgetProvider.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.PendingIntent;&#10;import android.appwidget.AppWidgetManager;&#10;import android.appwidget.AppWidgetProvider;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.widget.RemoteViews;&#10;import org.json.JSONObject;&#10;&#10;public class HitokotoWidgetProvider extends AppWidgetProvider {&#10;    static final String ACTION_FAV = &quot;com.blueeve.hitokoto.ACTION_FAV&quot;;&#10;    static final String ACTION_COPY = &quot;com.blueeve.hitokoto.ACTION_COPY&quot;;&#10;    static final String ACTION_REFRESH = &quot;com.blueeve.hitokoto.ACTION_REFRESH&quot;;&#10;    static final String ACTION_AUTO_REFRESH = &quot;com.blueeve.hitokoto.ACTION_AUTO_REFRESH&quot;;&#10;    static final String EXTRA_HITOKOTO_JSON = &quot;extra_hitokoto_json&quot;;&#10;    static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;&#10;    @Override&#10;    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {&#10;        for (int appWidgetId : appWidgetIds) {&#10;            updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            scheduleOrCancelRefresh(context, appWidgetId);&#10;        }&#10;    }&#10;&#10;    private void scheduleOrCancelRefresh(Context context, int appWidgetId) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        long interval = prefs.getLong(&quot;refreshInterval_&quot; + appWidgetId, prefs.getLong(&quot;refreshInterval_global&quot;, 0L));&#10;        android.app.AlarmManager alarmManager = (android.app.AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;        Intent intent = new Intent(context, HitokotoWidgetProvider.class);&#10;        intent.setAction(ACTION_AUTO_REFRESH);&#10;        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        android.app.PendingIntent pendingIntent = android.app.PendingIntent.getBroadcast(context, appWidgetId + 30000, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT | android.app.PendingIntent.FLAG_IMMUTABLE);&#10;        alarmManager.cancel(pendingIntent);&#10;        if (interval &gt; 0) {&#10;            long triggerAt = System.currentTimeMillis() + interval;&#10;            alarmManager.setRepeating(android.app.AlarmManager.RTC_WAKEUP, triggerAt, interval, pendingIntent);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDeleted(Context context, int[] appWidgetIds) {&#10;        super.onDeleted(context, appWidgetIds);&#10;        android.app.AlarmManager alarmManager = (android.app.AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;        for (int appWidgetId : appWidgetIds) {&#10;            Intent intent = new Intent(context, HitokotoWidgetProvider.class);&#10;            intent.setAction(ACTION_AUTO_REFRESH);&#10;            intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            android.app.PendingIntent pendingIntent = android.app.PendingIntent.getBroadcast(context, appWidgetId + 30000, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT | android.app.PendingIntent.FLAG_IMMUTABLE);&#10;            alarmManager.cancel(pendingIntent);&#10;        }&#10;    }&#10;&#10;    static void updateAppWidget(Context context, AppWidgetManager appWidgetManager, int appWidgetId) {&#10;        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_hitokoto);&#10;        JSONObject hitokoto = HitokotoProvider.getRandomHitokoto(context);&#10;        String hitokotoJson = hitokoto != null ? hitokoto.toString() : &quot;&quot;;&#10;        if (hitokoto != null) {&#10;            String text = hitokoto.optString(&quot;hitokoto&quot;, &quot;&quot;);&#10;            String from = hitokoto.optString(&quot;from&quot;, &quot;&quot;);&#10;            String author = hitokoto.optString(&quot;from_who&quot;, &quot;&quot;);&#10;            views.setTextViewText(R.id.tv_hitokoto, text);&#10;            views.setTextViewText(R.id.tv_from, &quot;—— &quot; + from);&#10;            views.setTextViewText(R.id.tv_author, author);&#10;        }&#10;        // 读取设置&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        int maxLines = prefs.getInt(&quot;maxLines_&quot; + appWidgetId, 4);&#10;        String font = prefs.getString(&quot;font_&quot; + appWidgetId, &quot;系统默认&quot;);&#10;        String bg = prefs.getString(&quot;bg_&quot; + appWidgetId, &quot;白色&quot;);&#10;        // 设置最大行数&#10;        views.setInt(R.id.tv_hitokoto, &quot;setMaxLines&quot;, maxLines);&#10;        // 设置字体（仅支持系统字体，assets字体需特殊处理，RemoteViews不支持 setTypeface）&#10;        if (!&quot;系统默认&quot;.equals(font)) {&#10;            // TODO: RemoteViews 不支持 setTypeface ,GG&#10;        }&#10;        // 设置背景（使用圆角xml）&#10;        int bgResId = R.drawable.bg_widget_white;&#10;        switch (bg) {&#10;            case &quot;白色&quot;:&#10;                bgResId = R.drawable.bg_widget_white; break;&#10;            case &quot;黑色&quot;:&#10;                bgResId = R.drawable.bg_widget_black; break;&#10;            case &quot;黄纸本&quot;:&#10;                bgResId = R.drawable.bg_widget_yellow; break;&#10;            case &quot;透明&quot;:&#10;                bgResId = R.drawable.bg_widget_trans; break;&#10;            case &quot;跟随系统&quot;:&#10;                int nightModeFlags = context.getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;                bgResId = (nightModeFlags == android.content.res.Configuration.UI_MODE_NIGHT_YES)&#10;                    ? R.drawable.bg_widget_black : R.drawable.bg_widget_white;&#10;                break;&#10;        }&#10;        views.setInt(R.id.widget_root, &quot;setBackgroundResource&quot;, bgResId);&#10;        // TODO: 字体颜色&#10;        // 优先读取单独设置，否则读取全局设置，最后默认黑色&#10;        String fontColor = prefs.getString(&quot;fontColor_&quot; + appWidgetId, null);&#10;        if (fontColor == null) fontColor = prefs.getString(&quot;fontColor_global&quot;, &quot;黑色&quot;);&#10;        int textColor = 0xFF222222; // 默认黑色&#10;        switch (fontColor) {&#10;            case &quot;黑色&quot;:&#10;                textColor = 0xFF222222; break;&#10;            case &quot;白色&quot;:&#10;                textColor = 0xFFFFFFFF; break;&#10;            case &quot;跟随系统&quot;:&#10;                int nightModeFlags2 = context.getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;                textColor = (nightModeFlags2 == android.content.res.Configuration.UI_MODE_NIGHT_YES) ? 0xFFFFFFFF : 0xFF222222;&#10;                break;&#10;        }&#10;        views.setTextColor(R.id.tv_hitokoto, textColor);&#10;        // 来源显示与颜色&#10;        Boolean showFrom = prefs.contains(&quot;showFrom_&quot; + appWidgetId) ? prefs.getBoolean(&quot;showFrom_&quot; + appWidgetId, true)&#10;            : prefs.getBoolean(&quot;showFrom_global&quot;, true);&#10;        String fromColor = prefs.contains(&quot;fromColor_&quot; + appWidgetId) ? prefs.getString(&quot;fromColor_&quot; + appWidgetId, &quot;灰色&quot;)&#10;            : prefs.getString(&quot;fromColor_global&quot;, &quot;灰色&quot;);&#10;        int fromTextColor = 0xFF888888; // 默认灰色&#10;        switch (fromColor) {&#10;            case &quot;灰色&quot;:&#10;                fromTextColor = 0xFF888888; break;&#10;            case &quot;白色&quot;:&#10;                fromTextColor = 0xFFFFFFFF; break;&#10;            case &quot;黑色&quot;:&#10;                fromTextColor = 0xFF222222; break;&#10;        }&#10;        views.setViewVisibility(R.id.tv_from, showFrom ? android.view.View.VISIBLE : android.view.View.GONE);&#10;        views.setTextColor(R.id.tv_from, fromTextColor);&#10;        // 作者显示&#10;        Boolean showAuthor = prefs.contains(&quot;showAuthor_&quot; + appWidgetId) ? prefs.getBoolean(&quot;showAuthor_&quot; + appWidgetId, true)&#10;            : prefs.getBoolean(&quot;showAuthor_global&quot;, true);&#10;        views.setViewVisibility(R.id.tv_author, showAuthor ? android.view.View.VISIBLE : android.view.View.GONE);&#10;        // 字体设置（仅支持系统字体，assets和自定义字体需主程序支持）&#10;        if (!&quot;系统默认&quot;.equals(font)) {&#10;            // TODO: RemoteViews 不支持 setTypeface，主程序可用&#10;        }&#10;        // 收藏按钮点击事件&#10;        Intent favIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        favIntent.setAction(ACTION_FAV);&#10;        favIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        favIntent.putExtra(EXTRA_HITOKOTO_JSON, hitokotoJson);&#10;        PendingIntent favPendingIntent = PendingIntent.getBroadcast(context, appWidgetId, favIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.btn_fav, favPendingIntent);&#10;        // 复制按钮点击事件&#10;        Intent copyIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        copyIntent.setAction(ACTION_COPY);&#10;        copyIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        copyIntent.putExtra(EXTRA_HITOKOTO_JSON, hitokotoJson);&#10;        PendingIntent copyPendingIntent = PendingIntent.getBroadcast(context, appWidgetId + 10000, copyIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.btn_copy, copyPendingIntent);&#10;        // 空白区域点击切换句子&#10;        Intent refreshIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        refreshIntent.setAction(ACTION_REFRESH);&#10;        refreshIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        PendingIntent refreshPendingIntent = PendingIntent.getBroadcast(context, appWidgetId + 20000, refreshIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.widget_root, refreshPendingIntent);&#10;        // 设置图标颜色（与字体颜色一致）&#10;        views.setInt(R.id.btn_fav, &quot;setColorFilter&quot;, textColor);&#10;        views.setInt(R.id.btn_copy, &quot;setColorFilter&quot;, textColor);&#10;        // TODO: 读取用户设置，切换背景色和字体&#10;        appWidgetManager.updateAppWidget(appWidgetId, views);&#10;    }&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        super.onReceive(context, intent);&#10;        String action = intent.getAction();&#10;        if (ACTION_FAV.equals(action)) {&#10;            String json = intent.getStringExtra(EXTRA_HITOKOTO_JSON);&#10;            if (json != null) {&#10;                try {&#10;                    JSONObject obj = new JSONObject(json);&#10;                    boolean added = FavoriteManager.addFavorite(context, obj);&#10;                    String msg = added ? &quot;已收藏&quot; : &quot;已存在于收藏&quot;;&#10;                    android.widget.Toast.makeText(context, msg, android.widget.Toast.LENGTH_SHORT).show();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        } else if (ACTION_COPY.equals(action)) {&#10;            String json = intent.getStringExtra(EXTRA_HITOKOTO_JSON);&#10;            if (json != null) {&#10;                try {&#10;                    JSONObject obj = new JSONObject(json);&#10;                    String text = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#10;                    ClipboardUtil.copy(context, text);&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        } else if (ACTION_REFRESH.equals(action)) {&#10;            int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);&#10;            if (appWidgetId != -1) {&#10;                AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);&#10;                updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            }&#10;        } else if (ACTION_AUTO_REFRESH.equals(action)) {&#10;            int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);&#10;            if (appWidgetId != -1) {&#10;                AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);&#10;                updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.PendingIntent;&#10;import android.appwidget.AppWidgetManager;&#10;import android.appwidget.AppWidgetProvider;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.widget.RemoteViews;&#10;import org.json.JSONObject;&#10;&#10;public class HitokotoWidgetProvider extends AppWidgetProvider {&#10;    static final String ACTION_FAV = &quot;com.blueeve.hitokoto.ACTION_FAV&quot;;&#10;    static final String ACTION_COPY = &quot;com.blueeve.hitokoto.ACTION_COPY&quot;;&#10;    static final String ACTION_REFRESH = &quot;com.blueeve.hitokoto.ACTION_REFRESH&quot;;&#10;    static final String ACTION_AUTO_REFRESH = &quot;com.blueeve.hitokoto.ACTION_AUTO_REFRESH&quot;;&#10;    static final String EXTRA_HITOKOTO_JSON = &quot;extra_hitokoto_json&quot;;&#10;    static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;&#10;    @Override&#10;    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {&#10;        for (int appWidgetId : appWidgetIds) {&#10;            updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            scheduleOrCancelRefresh(context, appWidgetId);&#10;        }&#10;    }&#10;&#10;    private void scheduleOrCancelRefresh(Context context, int appWidgetId) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        long interval = prefs.getLong(&quot;refreshInterval_&quot; + appWidgetId, prefs.getLong(&quot;refreshInterval_global&quot;, 0L));&#10;        android.app.AlarmManager alarmManager = (android.app.AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;        Intent intent = new Intent(context, HitokotoWidgetProvider.class);&#10;        intent.setAction(ACTION_AUTO_REFRESH);&#10;        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        android.app.PendingIntent pendingIntent = android.app.PendingIntent.getBroadcast(context, appWidgetId + 30000, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT | android.app.PendingIntent.FLAG_IMMUTABLE);&#10;        alarmManager.cancel(pendingIntent);&#10;        if (interval &gt; 0) {&#10;            long triggerAt = System.currentTimeMillis() + interval;&#10;            alarmManager.setRepeating(android.app.AlarmManager.RTC_WAKEUP, triggerAt, interval, pendingIntent);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDeleted(Context context, int[] appWidgetIds) {&#10;        super.onDeleted(context, appWidgetIds);&#10;        android.app.AlarmManager alarmManager = (android.app.AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;        for (int appWidgetId : appWidgetIds) {&#10;            Intent intent = new Intent(context, HitokotoWidgetProvider.class);&#10;            intent.setAction(ACTION_AUTO_REFRESH);&#10;            intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            android.app.PendingIntent pendingIntent = android.app.PendingIntent.getBroadcast(context, appWidgetId + 30000, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT | android.app.PendingIntent.FLAG_IMMUTABLE);&#10;            alarmManager.cancel(pendingIntent);&#10;        }&#10;    }&#10;&#10;    static void updateAppWidget(Context context, AppWidgetManager appWidgetManager, int appWidgetId) {&#10;        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_hitokoto);&#10;        JSONObject hitokoto = HitokotoProvider.getRandomHitokoto(context);&#10;        String hitokotoJson = hitokoto != null ? hitokoto.toString() : &quot;&quot;;&#10;        if (hitokoto != null) {&#10;            String text = hitokoto.optString(&quot;hitokoto&quot;, &quot;&quot;);&#10;            String from = hitokoto.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知来源&quot; : hitokoto.optString(&quot;from&quot;, &quot;&quot;);&#10;            String author = hitokoto.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知作者&quot; : hitokoto.optString(&quot;from_who&quot;, &quot;&quot;);&#10;            views.setTextViewText(R.id.tv_hitokoto, text);&#10;            views.setTextViewText(R.id.tv_from, &quot;—— &quot; + from);&#10;            views.setTextViewText(R.id.tv_author, author);&#10;        }&#10;        // 读取设置&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        int maxLines = prefs.getInt(&quot;maxLines_&quot; + appWidgetId, 4);&#10;        String font = prefs.getString(&quot;font_&quot; + appWidgetId, &quot;系统默认&quot;);&#10;        String bg = prefs.getString(&quot;bg_&quot; + appWidgetId, &quot;白色&quot;);&#10;        // 设置最大行数&#10;        views.setInt(R.id.tv_hitokoto, &quot;setMaxLines&quot;, maxLines);&#10;        // 设置字体（仅支持系统字体，assets字体需特殊处理，RemoteViews不支持 setTypeface）&#10;        if (!&quot;系统默认&quot;.equals(font)) {&#10;            // TODO: RemoteViews 不支持 setTypeface ,GG&#10;        }&#10;        // 设置背景（使用圆角xml）&#10;        int bgResId = R.drawable.bg_widget_white;&#10;        switch (bg) {&#10;            case &quot;白色&quot;:&#10;                bgResId = R.drawable.bg_widget_white; break;&#10;            case &quot;黑色&quot;:&#10;                bgResId = R.drawable.bg_widget_black; break;&#10;            case &quot;黄纸本&quot;:&#10;                bgResId = R.drawable.bg_widget_yellow; break;&#10;            case &quot;透明&quot;:&#10;                bgResId = R.drawable.bg_widget_trans; break;&#10;            case &quot;跟随系统&quot;:&#10;                int nightModeFlags = context.getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;                bgResId = (nightModeFlags == android.content.res.Configuration.UI_MODE_NIGHT_YES)&#10;                    ? R.drawable.bg_widget_black : R.drawable.bg_widget_white;&#10;                break;&#10;        }&#10;        views.setInt(R.id.widget_root, &quot;setBackgroundResource&quot;, bgResId);&#10;        // TODO: 字体颜色&#10;        // 优先读取单独设置，否则读取全局设置，最后默认黑色&#10;        String fontColor = prefs.getString(&quot;fontColor_&quot; + appWidgetId, null);&#10;        if (fontColor == null) fontColor = prefs.getString(&quot;fontColor_global&quot;, &quot;黑色&quot;);&#10;        int textColor = 0xFF222222; // 默认黑色&#10;        switch (fontColor) {&#10;            case &quot;黑色&quot;:&#10;                textColor = 0xFF222222; break;&#10;            case &quot;白色&quot;:&#10;                textColor = 0xFFFFFFFF; break;&#10;            case &quot;跟随系统&quot;:&#10;                int nightModeFlags2 = context.getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;                textColor = (nightModeFlags2 == android.content.res.Configuration.UI_MODE_NIGHT_YES) ? 0xFFFFFFFF : 0xFF222222;&#10;                break;&#10;        }&#10;        views.setTextColor(R.id.tv_hitokoto, textColor);&#10;        // 来源显示与颜色&#10;        Boolean showFrom = prefs.contains(&quot;showFrom_&quot; + appWidgetId) ? prefs.getBoolean(&quot;showFrom_&quot; + appWidgetId, true)&#10;            : prefs.getBoolean(&quot;showFrom_global&quot;, true);&#10;        String fromColor = prefs.contains(&quot;fromColor_&quot; + appWidgetId) ? prefs.getString(&quot;fromColor_&quot; + appWidgetId, &quot;灰色&quot;)&#10;            : prefs.getString(&quot;fromColor_global&quot;, &quot;灰色&quot;);&#10;        int fromTextColor = 0xFF888888; // 默认灰色&#10;        switch (fromColor) {&#10;            case &quot;灰色&quot;:&#10;                fromTextColor = 0xFF888888; break;&#10;            case &quot;白色&quot;:&#10;                fromTextColor = 0xFFFFFFFF; break;&#10;            case &quot;黑色&quot;:&#10;                fromTextColor = 0xFF222222; break;&#10;        }&#10;        views.setViewVisibility(R.id.tv_from, showFrom ? android.view.View.VISIBLE : android.view.View.GONE);&#10;        views.setTextColor(R.id.tv_from, fromTextColor);&#10;        // 作者显示&#10;        Boolean showAuthor = prefs.contains(&quot;showAuthor_&quot; + appWidgetId) ? prefs.getBoolean(&quot;showAuthor_&quot; + appWidgetId, true)&#10;            : prefs.getBoolean(&quot;showAuthor_global&quot;, true);&#10;        views.setViewVisibility(R.id.tv_author, showAuthor ? android.view.View.VISIBLE : android.view.View.GONE);&#10;        // 字体设置（仅支持系统字体，assets和自定义字体需主程序支持）&#10;        if (!&quot;系统默认&quot;.equals(font)) {&#10;            // TODO: RemoteViews 不支持 setTypeface，主程序可用&#10;        }&#10;        // 收藏按钮点击事件&#10;        Intent favIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        favIntent.setAction(ACTION_FAV);&#10;        favIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        favIntent.putExtra(EXTRA_HITOKOTO_JSON, hitokotoJson);&#10;        PendingIntent favPendingIntent = PendingIntent.getBroadcast(context, appWidgetId, favIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.btn_fav, favPendingIntent);&#10;        // 复制按钮点击事件&#10;        Intent copyIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        copyIntent.setAction(ACTION_COPY);&#10;        copyIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        copyIntent.putExtra(EXTRA_HITOKOTO_JSON, hitokotoJson);&#10;        PendingIntent copyPendingIntent = PendingIntent.getBroadcast(context, appWidgetId + 10000, copyIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.btn_copy, copyPendingIntent);&#10;        // 空白区域点击切换句子&#10;        Intent refreshIntent = new Intent(context, HitokotoWidgetProvider.class);&#10;        refreshIntent.setAction(ACTION_REFRESH);&#10;        refreshIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;        PendingIntent refreshPendingIntent = PendingIntent.getBroadcast(context, appWidgetId + 20000, refreshIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);&#10;        views.setOnClickPendingIntent(R.id.widget_root, refreshPendingIntent);&#10;        // 设置图标颜色（与字体颜色一致）&#10;        views.setInt(R.id.btn_fav, &quot;setColorFilter&quot;, textColor);&#10;        views.setInt(R.id.btn_copy, &quot;setColorFilter&quot;, textColor);&#10;        // TODO: 读取用户设置，切换背景色和字体&#10;        appWidgetManager.updateAppWidget(appWidgetId, views);&#10;    }&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        super.onReceive(context, intent);&#10;        String action = intent.getAction();&#10;        if (ACTION_FAV.equals(action)) {&#10;            String json = intent.getStringExtra(EXTRA_HITOKOTO_JSON);&#10;            if (json != null) {&#10;                try {&#10;                    JSONObject obj = new JSONObject(json);&#10;                    boolean added = FavoriteManager.addFavorite(context, obj);&#10;                    String msg = added ? &quot;已收藏&quot; : &quot;已存在于收藏&quot;;&#10;                    android.widget.Toast.makeText(context, msg, android.widget.Toast.LENGTH_SHORT).show();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        } else if (ACTION_COPY.equals(action)) {&#10;            String json = intent.getStringExtra(EXTRA_HITOKOTO_JSON);&#10;            if (json != null) {&#10;                try {&#10;                    JSONObject obj = new JSONObject(json);&#10;                    String text = obj.optString(&quot;hitokoto&quot;, &quot;&quot;);&#10;                    String from = obj.optString(&quot;from&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知来源&quot; : obj.optString(&quot;from&quot;, &quot;&quot;);&#10;                    String author = obj.optString(&quot;from_who&quot;, &quot;&quot;).equals(&quot;null&quot;) ? &quot;未知作者&quot; : obj.optString(&quot;from_who&quot;, &quot;&quot;);&#10;                    ClipboardUtil.copy(context, text + (from.isEmpty() ? &quot;&quot; : (&quot;\n—— &quot; + from)) + (author.isEmpty() ? &quot;&quot; : (&quot;  &quot; + author)));&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        } else if (ACTION_REFRESH.equals(action)) {&#10;            int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);&#10;            if (appWidgetId != -1) {&#10;                AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);&#10;                updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            }&#10;        } else if (ACTION_AUTO_REFRESH.equals(action)) {&#10;            int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);&#10;            if (appWidgetId != -1) {&#10;                AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);&#10;                updateAppWidget(context, appWidgetManager, appWidgetId);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/WidgetConfigActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/blueeve/hitokoto/WidgetConfigActivity.java" />
              <option name="originalContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.Activity;&#10;import android.appwidget.AppWidgetManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WidgetConfigActivity extends Activity {&#10;    private int appWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;&#10;    private EditText etMaxLines;&#10;    private Spinner spinnerFont, spinnerBg, spinnerFontColor, spinnerFromColor, spinnerRefreshInterval;&#10;    private Button btnSave;&#10;    private Switch switchShowFrom, switchShowAuthor;&#10;    private static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;    private static final String[] BG_OPTIONS = {&quot;白色&quot;, &quot;黑色&quot;, &quot;跟随系统&quot;, &quot;透明&quot;,&quot;黄纸本&quot;};&#10;    private static final String[] FONT_COLOR_OPTIONS = {&quot;黑色&quot;, &quot;白色&quot;, &quot;跟随系统&quot;};&#10;    private static final String[] FROM_COLOR_OPTIONS = {&quot;灰色&quot;, &quot;白色&quot;, &quot;黑色&quot;};&#10;    private static final String[] REFRESH_INTERVAL_OPTIONS = {&quot;15分钟&quot;, &quot;30分钟&quot;, &quot;1小时&quot;, &quot;2小时&quot;, &quot;5小时&quot;, &quot;12小时&quot;, &quot;24小时&quot;, &quot;永不自动刷新&quot;};&#10;    private static final long[] REFRESH_INTERVAL_VALUES = {15*60*1000L, 30*60*1000L, 60*60*1000L, 2*60*60*1000L, 5*60*60*1000L, 12*60*60*1000L, 24*60*60*1000L, 0L};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.widget_config);&#10;        etMaxLines = findViewById(R.id.et_max_lines);&#10;        spinnerFont = findViewById(R.id.spinner_font);&#10;        spinnerBg = findViewById(R.id.spinner_bg);&#10;        spinnerFontColor = findViewById(R.id.spinner_font_color);&#10;        spinnerFromColor = findViewById(R.id.spinner_from_color);&#10;        spinnerRefreshInterval = findViewById(R.id.spinner_refresh_interval);&#10;        btnSave = findViewById(R.id.btn_save);&#10;        switchShowFrom = findViewById(R.id.switch_show_from);&#10;        switchShowAuthor = findViewById(R.id.switch_show_author);&#10;&#10;        // 获取 appWidgetId&#10;        Intent intent = getIntent();&#10;        Bundle extras = intent.getExtras();&#10;        if (extras != null) {&#10;            appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);&#10;        }&#10;        if (appWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {&#10;            // 允许无 appWidgetId 进入全局设置模式&#10;            appWidgetId = -1;&#10;        }&#10;&#10;        // 字体选择&#10;        List&lt;String&gt; fontList = new ArrayList&lt;&gt;();&#10;        fontList.add(&quot;系统默认&quot;);&#10;        try {&#10;            String[] fonts = getAssets().list(&quot;&quot;);&#10;            if (fonts != null) {&#10;                for (String f : fonts) {&#10;                    if (f.endsWith(&quot;.ttf&quot;) || f.endsWith(&quot;.otf&quot;)) fontList.add(f);&#10;                }&#10;            }&#10;        } catch (IOException ignored) {}&#10;        // 字体选择（支持自定义目录）&#10;        java.io.File customFontDir = new java.io.File(&quot;/storage/emulated/0/HitokotoFonts/&quot;);&#10;        if (customFontDir.exists() &amp;&amp; customFontDir.isDirectory()) {&#10;            java.io.File[] files = customFontDir.listFiles();&#10;            if (files != null) {&#10;                for (java.io.File f : files) {&#10;                    if (f.getName().endsWith(&quot;.ttf&quot;) || f.getName().endsWith(&quot;.otf&quot;)) {&#10;                        fontList.add(&quot;[自定义]&quot; + f.getName());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        ArrayAdapter&lt;String&gt; fontAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, fontList);&#10;        fontAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFont.setAdapter(fontAdapter);&#10;&#10;        // 背景色选择&#10;        ArrayAdapter&lt;String&gt; bgAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, BG_OPTIONS);&#10;        bgAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerBg.setAdapter(bgAdapter);&#10;        // 字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fontColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FONT_COLOR_OPTIONS);&#10;        fontColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFontColor.setAdapter(fontColorAdapter);&#10;        // 来源字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fromColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FROM_COLOR_OPTIONS);&#10;        fromColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromColor.setAdapter(fromColorAdapter);&#10;        // 刷新间隔选择&#10;        ArrayAdapter&lt;String&gt; refreshIntervalAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, REFRESH_INTERVAL_OPTIONS);&#10;        refreshIntervalAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerRefreshInterval.setAdapter(refreshIntervalAdapter);&#10;&#10;        btnSave.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                saveConfig();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void saveConfig() {&#10;        int maxLines = 4;&#10;        try {&#10;            maxLines = Integer.parseInt(etMaxLines.getText().toString());&#10;        } catch (Exception ignored) {}&#10;        String font = spinnerFont.getSelectedItem().toString();&#10;        String bg = spinnerBg.getSelectedItem().toString();&#10;        String fontColor = spinnerFontColor.getSelectedItem().toString();&#10;        boolean showFrom = switchShowFrom.isChecked();&#10;        String fromColor = spinnerFromColor.getSelectedItem().toString();&#10;        boolean showAuthor = switchShowAuthor.isChecked();&#10;        int refreshIntervalIndex = spinnerRefreshInterval.getSelectedItemPosition();&#10;        long refreshIntervalValue = REFRESH_INTERVAL_VALUES[refreshIntervalIndex];&#10;        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;        if (appWidgetId == -1) {&#10;            editor.putInt(&quot;maxLines_global&quot;, maxLines);&#10;            editor.putString(&quot;font_global&quot;, font);&#10;            editor.putString(&quot;bg_global&quot;, bg);&#10;            editor.putString(&quot;fontColor_global&quot;, fontColor);&#10;            editor.putBoolean(&quot;showFrom_global&quot;, showFrom);&#10;            editor.putString(&quot;fromColor_global&quot;, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_global&quot;, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_global&quot;, refreshIntervalValue);&#10;            editor.apply();&#10;            android.widget.Toast.makeText(this, &quot;全局设置已保存&quot;, android.widget.Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            editor.putInt(&quot;maxLines_&quot; + appWidgetId, maxLines);&#10;            editor.putString(&quot;font_&quot; + appWidgetId, font);&#10;            editor.putString(&quot;bg_&quot; + appWidgetId, bg);&#10;            editor.putString(&quot;fontColor_&quot; + appWidgetId, fontColor);&#10;            editor.putBoolean(&quot;showFrom_&quot; + appWidgetId, showFrom);&#10;            editor.putString(&quot;fromColor_&quot; + appWidgetId, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_&quot; + appWidgetId, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_&quot; + appWidgetId, refreshIntervalValue);&#10;            editor.apply();&#10;            // 刷新小部件&#10;            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this);&#10;            HitokotoWidgetProvider.updateAppWidget(this, appWidgetManager, appWidgetId);&#10;            // 返回结果&#10;            Intent resultValue = new Intent();&#10;            resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            setResult(RESULT_OK, resultValue);&#10;            finish();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.blueeve.hitokoto;&#10;&#10;import android.app.Activity;&#10;import android.appwidget.AppWidgetManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WidgetConfigActivity extends Activity {&#10;    private int appWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;&#10;    private EditText etMaxLines;&#10;    private Spinner spinnerFont, spinnerBg, spinnerFontColor, spinnerFromColor, spinnerRefreshInterval;&#10;    private Button btnSave;&#10;    private Switch switchShowFrom, switchShowAuthor;&#10;    private static final String PREFS_NAME = &quot;widget_prefs&quot;;&#10;    private static final String[] BG_OPTIONS = {&quot;白色&quot;, &quot;黑色&quot;, &quot;跟随系统&quot;, &quot;透明&quot;,&quot;黄纸本&quot;};&#10;    private static final String[] FONT_COLOR_OPTIONS = {&quot;黑色&quot;, &quot;白色&quot;, &quot;跟随系统&quot;};&#10;    private static final String[] FROM_COLOR_OPTIONS = {&quot;灰色&quot;, &quot;白色&quot;, &quot;黑色&quot;};&#10;    private static final String[] REFRESH_INTERVAL_OPTIONS = {&quot;15分钟&quot;, &quot;30分钟&quot;, &quot;1小时&quot;, &quot;2小时&quot;, &quot;5小时&quot;, &quot;12小时&quot;, &quot;24小时&quot;, &quot;永不自动刷新&quot;};&#10;    private static final long[] REFRESH_INTERVAL_VALUES = {15*60*1000L, 30*60*1000L, 60*60*1000L, 2*60*60*1000L, 5*60*60*1000L, 12*60*60*1000L, 24*60*60*1000L, 0L};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.widget_config);&#10;        etMaxLines = findViewById(R.id.et_max_lines);&#10;        spinnerFont = findViewById(R.id.spinner_font);&#10;        spinnerBg = findViewById(R.id.spinner_bg);&#10;        spinnerFontColor = findViewById(R.id.spinner_font_color);&#10;        spinnerFromColor = findViewById(R.id.spinner_from_color);&#10;        spinnerRefreshInterval = findViewById(R.id.spinner_refresh_interval);&#10;        btnSave = findViewById(R.id.btn_save);&#10;        switchShowFrom = findViewById(R.id.switch_show_from);&#10;        switchShowAuthor = findViewById(R.id.switch_show_author);&#10;&#10;        // 获取 appWidgetId&#10;        Intent intent = getIntent();&#10;        Bundle extras = intent.getExtras();&#10;        if (extras != null) {&#10;            appWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);&#10;        }&#10;        if (appWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {&#10;            // 允许无 appWidgetId 进入全局设置模式&#10;            appWidgetId = -1;&#10;        }&#10;&#10;        // 字体选择&#10;        List&lt;String&gt; fontList = new ArrayList&lt;&gt;();&#10;        fontList.add(&quot;系统默认&quot;);&#10;        try {&#10;            String[] fonts = getAssets().list(&quot;&quot;);&#10;            if (fonts != null) {&#10;                for (String f : fonts) {&#10;                    if (f.endsWith(&quot;.ttf&quot;) || f.endsWith(&quot;.otf&quot;)) fontList.add(f);&#10;                }&#10;            }&#10;        } catch (IOException ignored) {}&#10;        // 字体选择（支持自定义目录）&#10;        java.io.File customFontDir = new java.io.File(&quot;/storage/emulated/0/HitokotoFonts/&quot;);&#10;        if (customFontDir.exists() &amp;&amp; customFontDir.isDirectory()) {&#10;            java.io.File[] files = customFontDir.listFiles();&#10;            if (files != null) {&#10;                for (java.io.File f : files) {&#10;                    if (f.getName().endsWith(&quot;.ttf&quot;) || f.getName().endsWith(&quot;.otf&quot;)) {&#10;                        fontList.add(&quot;[自定义]&quot; + f.getName());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        ArrayAdapter&lt;String&gt; fontAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, fontList);&#10;        fontAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFont.setAdapter(fontAdapter);&#10;&#10;        // 背景色选择&#10;        ArrayAdapter&lt;String&gt; bgAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, BG_OPTIONS);&#10;        bgAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerBg.setAdapter(bgAdapter);&#10;        // 字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fontColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FONT_COLOR_OPTIONS);&#10;        fontColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFontColor.setAdapter(fontColorAdapter);&#10;        // 来源字体颜色选择&#10;        ArrayAdapter&lt;String&gt; fromColorAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, FROM_COLOR_OPTIONS);&#10;        fromColorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerFromColor.setAdapter(fromColorAdapter);&#10;        // 刷新间隔选择&#10;        ArrayAdapter&lt;String&gt; refreshIntervalAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, REFRESH_INTERVAL_OPTIONS);&#10;        refreshIntervalAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerRefreshInterval.setAdapter(refreshIntervalAdapter);&#10;&#10;        btnSave.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                saveConfig();&#10;            }&#10;        });&#10;        // 设置窗口宽度为屏幕宽度的90%&#10;        android.view.WindowManager.LayoutParams params = getWindow().getAttributes();&#10;        android.util.DisplayMetrics dm = getResources().getDisplayMetrics();&#10;        params.width = (int) (dm.widthPixels * 0.9);&#10;        getWindow().setAttributes(params);&#10;    }&#10;&#10;    private void saveConfig() {&#10;        int maxLines = 4;&#10;        try {&#10;            maxLines = Integer.parseInt(etMaxLines.getText().toString());&#10;        } catch (Exception ignored) {}&#10;        String font = spinnerFont.getSelectedItem().toString();&#10;        String bg = spinnerBg.getSelectedItem().toString();&#10;        String fontColor = spinnerFontColor.getSelectedItem().toString();&#10;        boolean showFrom = switchShowFrom.isChecked();&#10;        String fromColor = spinnerFromColor.getSelectedItem().toString();&#10;        boolean showAuthor = switchShowAuthor.isChecked();&#10;        int refreshIntervalIndex = spinnerRefreshInterval.getSelectedItemPosition();&#10;        long refreshIntervalValue = REFRESH_INTERVAL_VALUES[refreshIntervalIndex];&#10;        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        SharedPreferences.Editor editor = prefs.edit();&#10;        if (appWidgetId == -1) {&#10;            editor.putInt(&quot;maxLines_global&quot;, maxLines);&#10;            editor.putString(&quot;font_global&quot;, font);&#10;            editor.putString(&quot;bg_global&quot;, bg);&#10;            editor.putString(&quot;fontColor_global&quot;, fontColor);&#10;            editor.putBoolean(&quot;showFrom_global&quot;, showFrom);&#10;            editor.putString(&quot;fromColor_global&quot;, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_global&quot;, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_global&quot;, refreshIntervalValue);&#10;            editor.apply();&#10;            android.widget.Toast.makeText(this, &quot;全局设置已保存&quot;, android.widget.Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            editor.putInt(&quot;maxLines_&quot; + appWidgetId, maxLines);&#10;            editor.putString(&quot;font_&quot; + appWidgetId, font);&#10;            editor.putString(&quot;bg_&quot; + appWidgetId, bg);&#10;            editor.putString(&quot;fontColor_&quot; + appWidgetId, fontColor);&#10;            editor.putBoolean(&quot;showFrom_&quot; + appWidgetId, showFrom);&#10;            editor.putString(&quot;fromColor_&quot; + appWidgetId, fromColor);&#10;            editor.putBoolean(&quot;showAuthor_&quot; + appWidgetId, showAuthor);&#10;            editor.putLong(&quot;refreshInterval_&quot; + appWidgetId, refreshIntervalValue);&#10;            editor.apply();&#10;            // 刷新小部件&#10;            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this);&#10;            HitokotoWidgetProvider.updateAppWidget(this, appWidgetManager, appWidgetId);&#10;            // 返回结果&#10;            Intent resultValue = new Intent();&#10;            resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);&#10;            setResult(RESULT_OK, resultValue);&#10;            finish();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>